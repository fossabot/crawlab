// Code generated by protoc-gen-go.
// source: proto/registry.proto
// DO NOT EDIT!

/*
Package go_crawlab_core_registry is a generated protocol buffer package.

It is generated from these files:
	proto/registry.proto

It has these top-level messages:
	Service
	Node
	Endpoint
	Value
	Options
	Result
	EmptyResponse
	GetRequest
	GetResponse
	ListRequest
	ListResponse
	WatchRequest
	Event
*/
package go_crawlab_core_registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// EventType defines the type of event
type EventType int32

const (
	EventType_Create EventType = 0
	EventType_Delete EventType = 1
	EventType_Update EventType = 2
)

var EventType_name = map[int32]string{
	0: "Create",
	1: "Delete",
	2: "Update",
}
var EventType_value = map[string]int32{
	"Create": 0,
	"Delete": 1,
	"Update": 2,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Service represents a go-micro service
type Service struct {
	Name      string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version   string            `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Endpoints []*Endpoint       `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
	Nodes     []*Node           `protobuf:"bytes,5,rep,name=nodes" json:"nodes,omitempty"`
	Options   *Options          `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Service) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Service) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *Service) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Service) GetOptions() *Options {
	if m != nil {
		return m.Options
	}
	return nil
}

// Node represents the node the service is on
type Node struct {
	Id       string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Address  string            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Port     int64             `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Node) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Node) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Endpoint is a endpoint provided by a service
type Endpoint struct {
	Name     string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Request  *Value            `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Response *Value            `protobuf:"bytes,3,opt,name=response" json:"response,omitempty"`
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Endpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Endpoint) GetRequest() *Value {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Endpoint) GetResponse() *Value {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Endpoint) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Value is an opaque value for a request or response
type Value struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type   string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Values []*Value `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Value) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Value) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Value) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// Options are registry options
type Options struct {
	Ttl int64 `protobuf:"varint,1,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *Options) Reset()                    { *m = Options{} }
func (m *Options) String() string            { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()               {}
func (*Options) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Options) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// Result is returns by the watcher
type Result struct {
	Action    string   `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Service   *Service `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Timestamp int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Result) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Result) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Result) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type GetResponse struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ListResponse struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type WatchRequest struct {
	// service is optional
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *WatchRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

// Event is registry event
type Event struct {
	// Event Id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// type of event
	Type EventType `protobuf:"varint,2,opt,name=type,enum=go.crawlab.core.registry.EventType" json:"type,omitempty"`
	// unix timestamp of event
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// service entry
	Service *Service `protobuf:"bytes,4,opt,name=service" json:"service,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_Create
}

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*Service)(nil), "go.crawlab.core.registry.Service")
	proto.RegisterType((*Node)(nil), "go.crawlab.core.registry.Node")
	proto.RegisterType((*Endpoint)(nil), "go.crawlab.core.registry.Endpoint")
	proto.RegisterType((*Value)(nil), "go.crawlab.core.registry.Value")
	proto.RegisterType((*Options)(nil), "go.crawlab.core.registry.Options")
	proto.RegisterType((*Result)(nil), "go.crawlab.core.registry.Result")
	proto.RegisterType((*EmptyResponse)(nil), "go.crawlab.core.registry.EmptyResponse")
	proto.RegisterType((*GetRequest)(nil), "go.crawlab.core.registry.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "go.crawlab.core.registry.GetResponse")
	proto.RegisterType((*ListRequest)(nil), "go.crawlab.core.registry.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "go.crawlab.core.registry.ListResponse")
	proto.RegisterType((*WatchRequest)(nil), "go.crawlab.core.registry.WatchRequest")
	proto.RegisterType((*Event)(nil), "go.crawlab.core.registry.Event")
	proto.RegisterEnum("go.crawlab.core.registry.EventType", EventType_name, EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	GetService(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Register(ctx context.Context, in *Service, opts ...grpc.CallOption) (*EmptyResponse, error)
	Deregister(ctx context.Context, in *Service, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListServices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Registry_WatchClient, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetService(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/go.crawlab.core.registry.Registry/GetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Register(ctx context.Context, in *Service, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/go.crawlab.core.registry.Registry/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Deregister(ctx context.Context, in *Service, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/go.crawlab.core.registry.Registry/Deregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListServices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/go.crawlab.core.registry.Registry/ListServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Registry_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Registry_serviceDesc.Streams[0], c.cc, "/go.crawlab.core.registry.Registry/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_WatchClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type registryWatchClient struct {
	grpc.ClientStream
}

func (x *registryWatchClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Registry service

type RegistryServer interface {
	GetService(context.Context, *GetRequest) (*GetResponse, error)
	Register(context.Context, *Service) (*EmptyResponse, error)
	Deregister(context.Context, *Service) (*EmptyResponse, error)
	ListServices(context.Context, *ListRequest) (*ListResponse, error)
	Watch(*WatchRequest, Registry_WatchServer) error
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.crawlab.core.registry.Registry/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetService(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.crawlab.core.registry.Registry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Register(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.crawlab.core.registry.Registry/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Deregister(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.crawlab.core.registry.Registry/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListServices(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).Watch(m, &registryWatchServer{stream})
}

type Registry_WatchServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type registryWatchServer struct {
	grpc.ServerStream
}

func (x *registryWatchServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.crawlab.core.registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetService",
			Handler:    _Registry_GetService_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Registry_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Registry_Deregister_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _Registry_ListServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Registry_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/registry.proto",
}

func init() { proto.RegisterFile("proto/registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0x5f, 0x6b, 0xd3, 0x50,
	0x14, 0x6f, 0x92, 0xfe, 0x3d, 0xdd, 0xe6, 0x38, 0x0c, 0x09, 0x55, 0xb4, 0x8b, 0x3a, 0x8b, 0x48,
	0x36, 0xaa, 0x30, 0x75, 0x08, 0x82, 0x2b, 0x0a, 0x6e, 0x0a, 0xd1, 0xa9, 0xe8, 0x83, 0x64, 0xcd,
	0x61, 0x0b, 0xb6, 0x49, 0xbc, 0xf7, 0xb6, 0x52, 0xfc, 0x34, 0x3e, 0xfb, 0x51, 0x7c, 0xf6, 0xab,
	0xf8, 0x2c, 0xf7, 0xe6, 0xa6, 0xed, 0xd8, 0xd2, 0x4c, 0x74, 0x6f, 0xe7, 0xdc, 0x9c, 0xdf, 0xf9,
	0xf7, 0xfb, 0xdd, 0xdb, 0xc2, 0x5a, 0xc2, 0x62, 0x11, 0x6f, 0x32, 0x3a, 0x0a, 0xb9, 0x60, 0x13,
	0x57, 0xb9, 0x68, 0x1f, 0xc5, 0x6e, 0x9f, 0xf9, 0x5f, 0x07, 0xfe, 0xa1, 0xdb, 0x8f, 0x19, 0xb9,
	0xd9, 0x77, 0xe7, 0xb7, 0x09, 0xb5, 0xd7, 0xc4, 0xc6, 0x61, 0x9f, 0x10, 0xa1, 0x1c, 0xf9, 0x43,
	0xb2, 0x8d, 0xb6, 0xd1, 0x69, 0x78, 0xca, 0x46, 0x1b, 0x6a, 0x63, 0x62, 0x3c, 0x8c, 0x23, 0xdb,
	0x54, 0xc7, 0x99, 0x8b, 0x2f, 0xa0, 0x3e, 0x24, 0xe1, 0x07, 0xbe, 0xf0, 0x6d, 0xab, 0x6d, 0x75,
	0x9a, 0xdd, 0x4d, 0x37, 0xaf, 0x8c, 0xab, 0x4b, 0xb8, 0xfb, 0x1a, 0xd1, 0x8b, 0x04, 0x9b, 0x78,
	0xd3, 0x04, 0xf8, 0x04, 0x1a, 0x14, 0x05, 0x49, 0x1c, 0x46, 0x82, 0xdb, 0x65, 0x95, 0xcd, 0xc9,
	0xcf, 0xd6, 0xd3, 0xa1, 0xde, 0x0c, 0x84, 0xf7, 0xa1, 0x12, 0xc5, 0x01, 0x71, 0xbb, 0xa2, 0xd0,
	0xd7, 0xf2, 0xd1, 0x2f, 0xe3, 0x80, 0xbc, 0x34, 0x18, 0x77, 0xa0, 0x16, 0x27, 0x22, 0x8c, 0x23,
	0x6e, 0x57, 0xdb, 0x46, 0xa7, 0xd9, 0x5d, 0xcf, 0xc7, 0xbd, 0x4a, 0x03, 0xbd, 0x0c, 0xd1, 0xda,
	0x81, 0xe5, 0x13, 0xf3, 0xe0, 0x2a, 0x58, 0x9f, 0x69, 0xa2, 0xf7, 0x27, 0x4d, 0x5c, 0x83, 0xca,
	0xd8, 0x1f, 0x8c, 0x48, 0x2f, 0x2f, 0x75, 0x1e, 0x99, 0x0f, 0x0c, 0xe7, 0xa7, 0x01, 0x65, 0xd9,
	0x09, 0xae, 0x80, 0x19, 0x06, 0x1a, 0x63, 0x86, 0x81, 0xdc, 0xb8, 0x1f, 0x04, 0x8c, 0x38, 0xcf,
	0x36, 0xae, 0x5d, 0xc9, 0x4f, 0x12, 0x33, 0x61, 0x5b, 0x6d, 0xa3, 0x63, 0x79, 0xca, 0xc6, 0xe7,
	0x73, 0x2c, 0xa4, 0x7b, 0xbb, 0xbb, 0x78, 0xf2, 0x3c, 0x0a, 0xfe, 0x6d, 0x9a, 0xef, 0x26, 0xd4,
	0x33, 0x56, 0xce, 0xd4, 0xd1, 0x43, 0xa8, 0x31, 0xfa, 0x32, 0x22, 0x2e, 0x14, 0xb8, 0xd9, 0xbd,
	0x9e, 0xdf, 0xe6, 0x5b, 0x99, 0xd6, 0xcb, 0xe2, 0x71, 0x07, 0xea, 0x8c, 0x78, 0x12, 0x47, 0x9c,
	0xd4, 0xe8, 0xe7, 0xc0, 0x4e, 0x01, 0xb8, 0x77, 0x6a, 0x3f, 0x5b, 0xc5, 0xba, 0xba, 0x98, 0x1d,
	0x1d, 0x43, 0x45, 0x75, 0x77, 0xe6, 0x7e, 0x10, 0xca, 0x62, 0x92, 0x64, 0x28, 0x65, 0xe3, 0x36,
	0x54, 0x15, 0x9a, 0xeb, 0xfb, 0x55, 0x38, 0xb6, 0x0e, 0x77, 0xae, 0x40, 0x4d, 0x8b, 0x55, 0x36,
	0x28, 0xc4, 0x40, 0x95, 0xb2, 0x3c, 0x69, 0x3a, 0xdf, 0xa0, 0xea, 0x11, 0x1f, 0x0d, 0x04, 0x5e,
	0x86, 0xaa, 0xdf, 0x97, 0x61, 0xba, 0x13, 0xed, 0xc9, 0x4b, 0xc1, 0xd3, 0xfb, 0xaa, 0xb9, 0x5a,
	0x2f, 0xbc, 0xd8, 0x5e, 0x86, 0xc0, 0xab, 0xd0, 0x10, 0xe1, 0x90, 0xb8, 0xf0, 0x87, 0x89, 0x56,
	0xea, 0xec, 0xc0, 0xb9, 0x04, 0xcb, 0xbd, 0x61, 0x22, 0x26, 0x9e, 0xe6, 0xc7, 0xd9, 0x00, 0x78,
	0x46, 0xc2, 0xd3, 0x54, 0xdb, 0xb3, 0xca, 0x69, 0x4b, 0x99, 0xeb, 0xec, 0x41, 0x53, 0xc5, 0x69,
	0x5a, 0x1f, 0x43, 0x5d, 0x7f, 0xe1, 0xb6, 0xa1, 0x96, 0x73, 0x8e, 0x1e, 0xa7, 0x10, 0x67, 0x19,
	0x9a, 0x7b, 0x21, 0xcf, 0xca, 0x3a, 0xfb, 0xb0, 0x94, 0xba, 0xff, 0x27, 0x7b, 0x07, 0x96, 0xde,
	0xf9, 0xa2, 0x7f, 0x5c, 0x3c, 0xd5, 0x0f, 0x03, 0x2a, 0xbd, 0x31, 0x45, 0xe2, 0xd4, 0x2b, 0xb0,
	0x3d, 0xa7, 0x87, 0x95, 0xee, 0x8d, 0x05, 0x9a, 0x95, 0xf0, 0x37, 0x93, 0x84, 0xb4, 0x68, 0x16,
	0xee, 0x7f, 0x9e, 0xda, 0xf2, 0xdf, 0x52, 0x7b, 0x67, 0x13, 0x1a, 0xd3, 0x6a, 0x08, 0x50, 0x7d,
	0xca, 0xc8, 0x17, 0xb4, 0x5a, 0x92, 0xf6, 0x2e, 0x0d, 0x48, 0xd0, 0xaa, 0x21, 0xed, 0x83, 0x24,
	0x90, 0xe7, 0x66, 0xf7, 0x97, 0x05, 0x75, 0x4f, 0xa7, 0xc3, 0x8f, 0x8a, 0xe9, 0xec, 0xb7, 0xe6,
	0x66, 0x7e, 0xdd, 0x99, 0x1e, 0x5a, 0xb7, 0x0a, 0xa2, 0xb4, 0x88, 0x4a, 0xf8, 0x3e, 0x2b, 0x44,
	0x0c, 0x8b, 0x47, 0x6a, 0xdd, 0x5e, 0xb0, 0xcf, 0x13, 0xf2, 0x2c, 0xe1, 0x07, 0x80, 0x5d, 0x62,
	0x17, 0x93, 0xfb, 0x53, 0xaa, 0x3b, 0x8d, 0xe4, 0xb8, 0x60, 0xdc, 0x39, 0xb9, 0xb6, 0x36, 0x8a,
	0xc2, 0xa6, 0x05, 0x0e, 0xa0, 0xa2, 0x94, 0x88, 0x0b, 0x20, 0xf3, 0x52, 0x6d, 0xb5, 0xf3, 0xe3,
	0xd2, 0x47, 0xc3, 0x29, 0x6d, 0x19, 0x87, 0x55, 0xf5, 0xaf, 0xe2, 0xde, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0x6b, 0x9b, 0x3b, 0x6d, 0x08, 0x00, 0x00,
}
